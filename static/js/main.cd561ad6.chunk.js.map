{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","currentData","setData","fontSize","setFontSize","handleScroll","sTop","ls","window","localStorage","orientation","pageYOffset","document","documentElement","scrollTop","body","setItem","useEffect","getItem","oldStop","Number","addEventListener","removeEventListener","a","axios","get","data","getdata","Container","fluid","className","id","Form","Group","Label","Control","type","custom","min","max","step","value","onChange","e","val","target","Row","Col","xs","md","ListGroup","items","map","item","index","Item","style","title","rel","href","url","Date","date_modified","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kUAwGeA,MAjGf,WAAgB,IAAD,EACkBC,mBAAS,MAD3B,mBACNC,EADM,KACOC,EADP,OAEmBF,mBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAe,WACnB,IACIC,EADAC,EAAKC,OAAOC,aAGdH,EADgC,qBAAvBE,OAAOE,YACTF,OAAOG,YAEPC,SAASC,gBAAgBC,WAAaF,SAASG,KAAKD,WAAa,EAE1EP,EAAGS,QAAQ,OAAQV,IAqCrB,OAlCAW,qBAAU,WACR,IAAIV,EAAKC,OAAOC,aAChB,GAAIF,EAAGW,QAAQ,QAAS,CACtB,IAAIC,EAAUC,OAAOb,EAAGW,QAAQ,SAC5BC,IACgC,qBAAvBX,OAAOE,YAChBF,OAAOG,YAAcQ,GAErBP,SAASC,gBAAgBC,UAAYK,EACrCP,SAASG,KAAKD,UAAYK,QAMlCF,qBAAU,WAER,OADAT,OAAOa,iBAAiB,SAAUhB,GAC3B,WACLG,OAAOc,oBAAoB,SAAUjB,MAEtC,IAEHY,qBAAU,YACK,uCAAG,8BAAAM,EAAA,sEACSC,IAAMC,IAC3B,+CAFY,gBACNC,EADM,EACNA,KAGRxB,EAAQwB,GAJM,2CAAH,qDAMbC,KACC,IAKD,cAACC,EAAA,EAAD,CAAWC,MAAM,KAAjB,SACG5B,GACC,gCACE,oBAAI6B,UAAU,kCAAkCC,GAAG,UAAnD,0EAGA,cAACC,EAAA,EAAD,CAAMF,UAAU,YAAhB,SACE,eAACE,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,mDACA,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,QACLC,QAAM,EACNC,IAAI,IACJC,IAAI,KACJC,KAAK,IACLC,MAAOtC,EACPuC,SAAU,SAACC,GApBF,IAACC,IAqBOD,EAAEE,OAAOJ,MApBtCrC,EAAYgB,OAAOwB,YAyBb,cAACE,EAAA,EAAD,CAAKhB,UAAU,4BAAf,SACE,cAACiB,EAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,OAAX,SACE,cAACC,EAAA,EAAD,UACGjD,EAAYkD,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACrB,eAACJ,EAAA,EAAUK,KAAX,CAEEzB,UAAU,iBACV0B,MAAO,CAAErD,SAAS,GAAD,OAAK,GAAKA,EAAV,OAHnB,UAKGmD,EAAQ,EALX,IAKeD,EAAKI,MALpB,IAME,mBAAGZ,OAAO,SAASa,IAAI,aAAaC,KAAMN,EAAKO,IAA/C,SACG,IAAIC,KAAKR,EAAKS,eAAeC,uBAPlC,MACOV,EAAKtB,mBCxEfiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/D,SAASgE,eAAe,SAM1BZ,M","file":"static/js/main.cd561ad6.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, ListGroup, Col, Row, Form } from \"react-bootstrap\";\n\nfunction App() {\n  const [currentData, setData] = useState(null);\n  const [fontSize, setFontSize] = useState(0);\n\n  const handleScroll = () => {\n    let ls = window.localStorage;\n    let sTop;\n    if (typeof window.orientation !== \"undefined\") {\n      sTop = window.pageYOffset;\n    } else {\n      sTop = document.documentElement.scrollTop || document.body.scrollTop || 0;\n    }\n    ls.setItem(\"sTop\", sTop);\n  };\n\n  useEffect(() => {\n    let ls = window.localStorage;\n    if (ls.getItem(\"sTop\")) {\n      let oldStop = Number(ls.getItem(\"sTop\"));\n      if (oldStop) {\n        if (typeof window.orientation !== \"undefined\") {\n          window.pageYOffset = oldStop;\n        } else {\n          document.documentElement.scrollTop = oldStop;\n          document.body.scrollTop = oldStop;\n        }\n      }\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    const getdata = async () => {\n      const { data } = await axios.get(\n        \"https://ruanyf.github.io/sina-news/rss.json\"\n      );\n      setData(data);\n    };\n    getdata();\n  }, []);\n  const handleFontSize = (val) => {\n    setFontSize(Number(val));\n  };\n  return (\n    <Container fluid=\"xl\">\n      {currentData && (\n        <div>\n          <h2 className=\"text-center mt-2 text-secondary\" id=\"heading\">\n            新浪全球实时新闻直播\n          </h2>\n          <Form className=\"pl-5 pr-5\">\n            <Form.Group>\n              <Form.Label>调节字体大小</Form.Label>\n              <Form.Control\n                type=\"range\"\n                custom\n                min=\"1\"\n                max=\"20\"\n                step=\"1\"\n                value={fontSize}\n                onChange={(e) => {\n                  handleFontSize(e.target.value);\n                }}\n              />\n            </Form.Group>\n          </Form>\n          <Row className=\"justify-content-md-center\">\n            <Col xs md=\"auto\">\n              <ListGroup>\n                {currentData.items.map((item, index) => (\n                  <ListGroup.Item\n                    key={item.id}\n                    className=\"main-font-size\"\n                    style={{ fontSize: `${20 + fontSize}px` }}\n                  >\n                    {index + 1}.{item.title}(\n                    <a target=\"_blank\" rel=\"noreferrer\" href={item.url}>\n                      {new Date(item.date_modified).toLocaleTimeString()}\n                    </a>\n                    )\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}